#include "Arduino.h"   // pro mini optiboot COM9 // !!! DISCONNECT CHINT RS232  !!!

//#define DEBUG

#define NODE_ID 14

//#define SERIAL_CONSOLE 77
//#include <NetwSerial.h>
//NetwSerial console;

//#define SERIAL_PARENT
//#include <NetwSerial.h>
//NetwSerial parentNode;

#define TWI_PARENT
#include <NetwTWI.h>
NetwTWI parentNode ;

//#define SPI_PARENT
//#include <NetwSPI.h>
//NetwSPI parentNode(NODE_ID);

/****************************
 *

2017-05-05 TWI_FREQ 200000L

2017-02-13 TWI_FREQ 100000L
 	 	   NetwSerial
           replace Netw by NetwBase
           upgrade NetwI2C to NetwBase
		   optimize eeparm.loop


2017-01-15 HomeNetH.h: i2c op 50Khz
           new Parms

2017-01-12 add bootCount
           retry
		   HomeNetH.h 2017-01-10  refactor bootTimer
           new EEProm class replacing EEParms and Parms
		   System::ramFree()
		   set netw.netwTimer   moved to NETW class
		   HomeNetH.h 2017-01-10  netw.sendData retry on send error

2017-01-08 HomeNetH.h 2017-01-08 fix volatile

2017-01-07 add netw.execParms(cmd, id, value) in execParms
           add if(req->data.cmd != 21 || parms.parmsUpdateFlag==0 ) in loop.handle netw request
           move parms.loop(); before loop.handle netw request
           HomeNetH.h 2017-01-06

2017-01-07 TODO eeparms.exeParms  case 3: netw.netwTimer = millis() + (value * 1000); //  netwSleep

 the  chint from the rs232 !! the upload will fail when the chint is still connected
 // 6.0 2016-08-11 new Chint based on Ketel

 */

#define TRACE_MSEC 3000

#define CHINT_SAMPLE_SEC 60      	// sense temp every 1 min
//#define CHINT_SOURCE 	 0x0100  	// just an adress for the Arduino
//#define CHINT_DEST 		 0x0001     // just an adress for the Chint

//tell the Chint.h to trace for testing/debugging

#include "Chint.h"
#include <ArdUtils.h>      // utilties

ArdUtils util;                  // utilities

void (*resetFunc)(void) = 0;               //declare reset function @ address 0

Chint myChint(Serial);

unsigned long 	prevMillis = 0;

unsigned long 	timeStampTrace = TRACE_MSEC;
bool		  	timeStampTraceOverflow = false;

//unsigned long todayTotalTimer = 0;

boolean logChintErrors = false;


class EEParms2: public EEProm
{
public:
	long chk1  = 0x01020304;
	virtual ~EEParms2(){}
	EEParms2(){	}

    void setup(  ) //
    {
		if( readLong(offsetof(EEParms2, chk1)) == chk1  )
    	{
    		readAll();
    		changed = false;
//    		resync();
			#ifdef DEBUG
				Serial.println(F("EEProm.readAll"));
			#endif
    	}
		else
		{
			bootCount=0;
		}
    }

	void loop()
	{
		if(changed)
		{
			#ifdef DEBUG
				Serial.println(F("Parms.loop.changed"));
			#endif
			write(offsetof(EEParms2, chk1), chk1);
			EEProm::writeAll();
			changed = false;
//			resync();
		}

		EEProm::loop();
	}


};

EEParms2 eeParms2;

#ifdef SPI_CONSOLE
	ISR (SPI_STC_vect){	console.handleInterupt();}
#endif
#ifdef	TWI_PARENT
	ISR(TWI_vect){ parentNode.tw_int(); }
#endif
#ifdef SPI_PARENT
	ISR (SPI_STC_vect){parentNode.handleInterupt();}
#endif


int localSetVal(int id, long val)
{
	switch(id )
	{
	default:
		eeParms2.setVal( id,  val);
		break;
	}
}

//int localUpload(int id) {return localUpload(id, false);}
//int localUpload(int id, bool immediate)
//{
//	int ret = 0;
//	long val;
//
//	switch( id )
//	{
//	#ifdef VOLTAGE_PIN
//		case 11: parentNode.upload(id, vin.val, immediate);    		break;
//	#endif
//
//	case 54: myChint.upload(id);  	break;  // parentNode.upload(id, myChint.eTotal_f, immediate);
//	case 55: myChint.upload(id); 	break; //parentNode.upload(id, myChint.eToday_f * 100.0 , immediate);
//	case 56: myChint.upload(id);  	break;  //parentNode.upload(id, myChint.temp_f * 10.0 , immediate);
//	case 57: myChint.upload(id);	break;  //parentNode.upload(id, myChint.power_l, immediate);
//
//	default:
//		if( parentNode.getVal(id, &val)>0
//		 || eeParms2.getVal(id, &val)>0
//		){
//			ret=parentNode.upload( id, val, immediate );
//		}
//		break;
//	}
//
//	return ret;
//}

int upload(int id)
{
	int ret = 0;

	switch( id )
	{
	#ifdef VOLTAGE_PIN
		case 11: parentNode.upload(id, vin.val, immediate);    		break;
	#endif

	case 54: myChint.upload(id);  	break;  // parentNode.upload(id, myChint.eTotal_f, immediate);
	case 55: myChint.upload(id); 	break; //parentNode.upload(id, myChint.eToday_f * 100.0 , immediate);
	case 56: myChint.upload(id);  	break;  //parentNode.upload(id, myChint.temp_f * 10.0 , immediate);
	case 57: myChint.upload(id);	break;  //parentNode.upload(id, myChint.power_l, immediate);

	default:
		if( 1==2
		 ||	parentNode.upload(id)>0
		 ||	eeParms2.upload(id)>0
		){}
		break;
	}
	return ret;
}


int upload(int id, long val) { return upload(id, val, millis()); }
int upload(int id, long val, unsigned long timeStamp)
{

	return parentNode.txUpload(id, val, timeStamp);
}


int handleParentReq( RxItem *rxItem)  // cmd, to, parm1, parm2
{
	if( rxItem->data.msg.node==2 ||  rxItem->data.msg.node == parentNode.nodeId)
	{
		return localRequest(rxItem);
	}

	#ifdef DEBUG
		parentNode.debug("skip", rxItem);
	#endif

	return 0;
}


void setup()  // TODO
{
   // digitalWrite(13,HIGH);

	wdt_reset();
	// First thing, turn it off
	wdt_disable();
	wdt_enable(WDTO_8S);

	Serial.begin(9600);

	eeParms2.setup();
	eeParms2.onUpload(upload);

//	myChint.timerInterval = (long) CHINT_SAMPLE_SEC * 1000L;
	myChint.id = 55;
	myChint.onUpload(upload);

	#ifdef DEBUG
		//myChint.activate(false);
		Serial.println(F("Strt chint DEBUG t="));
		//    myChint.retCode     = 0;
		//    myChint.power_l       = 999;
		//    myChint.temp_f        = 88.0;
		//    myChint.eToday_f      = 7.7;
		//    myChint.eTotal_f         = 66;
	#else
		myChint.begin();
	#endif

	myChint.loop(3);  // pre-read values




	#ifdef SERIAL_CONSOLE
		console.nodeId = 77;
		console.isConsole = true;
		console.onReceive( localRequest );
		//console.setup(0, 115200);
	#endif

	int nodeId = NODE_ID;
	//if(nodeId==0) nodeId=eeParms2.nodeId;

	parentNode.onReceive( handleParentReq);
//	parentNode.onError(uploadError);
	parentNode.onUpload(upload);
	parentNode.nodeId = nodeId;
	parentNode.isParent = true;


	#ifdef SERIAL_PARENT
	//	delay(100);
	//	parentNode.setup(0,115200);
	#endif

	#ifdef TWI_PARENT
		parentNode.begin();
	#endif


	#ifdef NETW_PARENT_SPI
		bool isSPIMaster = false;
		parentNode.setup( SPI_PIN, isSPIMaster);
		parentNode.isParent = true;
	#endif

   // parentNode.pullUpsOff();

	wdt_reset();
	wdt_enable(WDTO_8S);
    digitalWrite(13,LOW);
}


int localRequest(RxItem *rxItem)
{
	#ifdef DEBUG
		parentNode.debug("local", rxItem);
	#endif

	int ret=0;

	switch (  rxItem->data.msg.cmd)
	{
	case 't': trace( ); break;
	case 'x': parentNode.tw_restart(); break;

	case 's':
	case 'S':
		localSetVal(rxItem->data.msg.id, rxItem->data.msg.val);
		upload(rxItem->data.msg.id);
		break;
	case 'r':
	case 'R':
		upload(rxItem->data.msg.id);
		break;

	default:
		eeParms2.handleRequest(rxItem);
		util.handleRequest(rxItem);
		break;
	}

	return ret;
}


void loop()  // TODO
{
	wdt_reset();

	if(prevMillis > millis())
	{
		timeStampTraceOverflow = false;
		myChint.resetTimers();
	}
	prevMillis = millis();

	#if defined(SERIAL_CONSOLE) || defined(SPI_CONSOLE)
		console.loop();
	#endif

	myChint.loop();
//    if(myChint.isAvailable(&parentNode, &request, 55) )
//    {
//    	int ret = parentNode.write(&request);
//    	myChint.commit();
//    }

	parentNode.loop();

	eeParms2.loop();

	util.loop();


	if(  parentNode.isReady()
	 && millis() > eeParms2.bootTimer
	 && eeParms2.bootMessages < 20
	 && parentNode.nodeId > 0)
	{
		int ret=0;
		eeParms2.bootTimer = millis() + 10;
		switch( eeParms2.bootMessages )
		{
		case 2: ret =  upload(0); break;
		case 5: ret =  upload(50); break;

		case 10: ret =  upload(81); break; //readCount
		case 13: ret =  upload(84); break; //sendCount
//		case 14: ret =  upload(85); break; //sendErrorCount
//		case 15: ret =  localUpload(86); break; //sendRetryCount

		#ifdef VOLTAGE_PIN
			case 3: ret =  upload(11); break;  	// Vin
		#endif

		}

		if(ret<0)
			{ eeParms2.bootTimer = millis() + TWI_SEND_ERROR_INTERVAL;}
		else
			{eeParms2.bootMessages++;}


	}


	#ifdef DEBUG
		if( ! timeStampTraceOverflow
		 && timeStampTrace <= millis()
		){
			trace();

			timeStampTrace = millis() + TRACE_MSEC;
			if(timeStampTrace < millis()) timeStampTraceOverflow=true;
		}
	#endif
}


void trace( )
{
	Serial.print("@ ");
	Serial.print(millis() / 1000);
	Serial.print(": ");

	Serial.println();

    parentNode.trace("pNd");

	#ifdef VOLTAGE_PIN
		vin.trace("vin");
	#endif

}

//#include <Arduino.h>
//#include <inttypes.h>

//#define Aref 2860.0    // in mV
//#define Aref 5000.0    // in mV

// WHEN ARef is connected THEN set analogReference to external before analogRead to prevent DAMAGE
//analogReference(INTERNAL );  // INTERNAL EXTERNAL  Mega only INTERNAL1V1    INTERNAL2V56

